name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        target: ${{ matrix.target }}

    - name: Install system dependencies
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Build
      run: cargo build --release --verbose --all-features

    - name: Run tests
      run: cargo test --release --verbose --all-features

    - name: Create release assets
      run: |
        mkdir -p dist
        cp target/release/shiva dist/shiva-${{ matrix.target }}
        if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
          cp target/release/shiva dist/shiva-linux-x86_64
        elif [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
          cp target/release/shiva.exe dist/shiva-windows-x86_64.exe
        elif [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
          cp target/release/shiva dist/shiva-macos-x86_64
        fi

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: shiva-${{ matrix.target }}
        path: dist/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/shiva-*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }} 